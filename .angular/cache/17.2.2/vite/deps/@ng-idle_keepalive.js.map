{
  "version": 3,
  "sources": ["../../../../../node_modules/@ng-idle/keepalive/fesm2022/ng-idle-keepalive.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpRequest } from '@angular/common/http';\nimport * as i1$1 from '@ng-idle/core';\nimport { KeepaliveSvc, NgIdleModule } from '@ng-idle/core';\n\n/**\n * An example of an injectable service.\n */\nclass Keepalive extends KeepaliveSvc {\n  /*\n   * Initializes a new instance of Keepalive\n   * @param http - The HTTP service.\n   */\n  constructor(http, zone) {\n    super();\n    this.http = http;\n    this.zone = zone;\n    this.pingInterval = 10 * 60;\n    /*\n     * An event emitted when the service is pinging.\n     */\n    this.onPing = new EventEmitter();\n    /*\n     * An event emitted when the service has pinged an HTTP endpoint and received a response.\n     */\n    this.onPingResponse = new EventEmitter();\n  }\n  /*\n   * Sets the string or Request that should be used when pinging.\n   * @param url - The URL or Request object to use when pinging.\n   * @return The current Request used when pinging.\n   */\n  request(url) {\n    if (typeof url === 'string') {\n      this.pingRequest = new HttpRequest('GET', url);\n    } else if (url instanceof HttpRequest) {\n      this.pingRequest = url;\n    } else if (url === null) {\n      this.pingRequest = null;\n    }\n    return this.pingRequest;\n  }\n  /*\n   * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n   * @param seconds - The ping interval in seconds.\n   * @return The current interval value.\n   */\n  interval(seconds) {\n    if (!isNaN(seconds) && seconds > 0) {\n      this.pingInterval = seconds;\n    } else if (!isNaN(seconds) && seconds <= 0) {\n      throw new Error('Interval value must be greater than zero.');\n    }\n    return this.pingInterval;\n  }\n  /*\n   * Immediately performs the ping operation. If a request has been set, an HTTP\n   * request will be made and the response will be emitted via the\n   * onPingResponse event.\n   */\n  ping() {\n    this.onPing.emit(null);\n    if (this.pingRequest) {\n      this.http.request(this.pingRequest).subscribe(response => {\n        this.onPingResponse.emit(response);\n      }, error => {\n        this.onPingResponse.emit(error);\n      });\n    }\n  }\n  /*\n   * Starts pinging on an interval.\n   */\n  start() {\n    this.stop();\n    this.zone.runOutsideAngular(() => {\n      this.pingHandle = setInterval(() => {\n        this.zone.run(() => {\n          this.ping();\n        });\n      }, this.pingInterval * 1000);\n    });\n  }\n  /*\n   * Stops pinging on an interval.\n   */\n  stop() {\n    if (this.hasPingHandle()) {\n      clearInterval(this.pingHandle);\n      this.pingHandle = null;\n    }\n  }\n  /*\n   * Performs any cleanup tasks when Angular destroys the instance.\n   */\n  ngOnDestroy() {\n    this.stop();\n  }\n  /*\n   * Returns whether or not the service will ping automatically at the specified interval.\n   * @return True if the service will ping at the specified interval; otherwise, false.\n   */\n  isRunning() {\n    return this.hasPingHandle();\n  }\n  hasPingHandle() {\n    return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';\n  }\n  static {\n    this.ɵfac = function Keepalive_Factory(t) {\n      return new (t || Keepalive)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Keepalive,\n      factory: Keepalive.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Keepalive, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NgIdleKeepaliveModule {\n  static forRoot() {\n    return {\n      ngModule: NgIdleKeepaliveModule,\n      providers: [Keepalive, {\n        provide: KeepaliveSvc,\n        useExisting: Keepalive\n      }]\n    };\n  }\n  static {\n    this.ɵfac = function NgIdleKeepaliveModule_Factory(t) {\n      return new (t || NgIdleKeepaliveModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgIdleKeepaliveModule,\n      imports: [i1$1.NgIdleModule]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [NgIdleModule.forRoot()]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIdleKeepaliveModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgIdleModule.forRoot()]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of keepalive\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Keepalive, NgIdleKeepaliveModule };\n"],
  "mappings": "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",
  "names": []
}
